--
-- json.lua
--
-- Copyright (c) 2019 rxi
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy of
-- this software and associated documentation files (the "Software"), to deal in
-- the Software without restriction, including without limitation the rights to
-- use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
-- of the Software, and to permit persons to whom the Software is furnished to do
-- so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in all
-- copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-- SOFTWARE.
--
json = {
    _version = "0.1.2"
}

-------------------------------------------------------------------------------
-- Encode
-------------------------------------------------------------------------------

local encode

local escape_char_map = {
    ["\\"] = "\\\\",
    ["\""] = "\\\"",
    ["\b"] = "\\b",
    ["\f"] = "\\f",
    ["\n"] = "\\n",
    ["\r"] = "\\r",
    ["\t"] = "\\t"
}

local escape_char_map_inv = {
    ["\\/"] = "/"
}
for k, v in pairs(escape_char_map) do
    escape_char_map_inv[v] = k
end

local function escape_char(c)
    return escape_char_map[c] or string.format("\\u%04x", c:byte())
end

local function encode_nil(val)
    return "null"
end

local function encode_table(val, stack)
    local res = {}
    stack = stack or {}

    -- Circular reference?
    if stack[val] then
        error("circular reference")
    end

    stack[val] = true

    if rawget(val, 1) ~= nil or next(val) == nil then
        -- Treat as array -- check keys are valid and it is not sparse
        local n = 0
        for k in pairs(val) do
            if type(k) ~= "number" then
                error("invalid table: mixed or invalid key types")
            end
            n = n + 1
        end
        if n ~= #val then
            error("invalid table: sparse array")
        end
        -- Encode
        for i, v in ipairs(val) do
            table.insert(res, encode(v, stack))
        end
        stack[val] = nil
        return "[" .. table.concat(res, ",") .. "]"

    else
        -- Treat as an object
        for k, v in pairs(val) do
            if type(k) ~= "string" then
                error("invalid table: mixed or invalid key types")
            end
            table.insert(res, encode(k, stack) .. ":" .. encode(v, stack))
        end
        stack[val] = nil
        return "{" .. table.concat(res, ",") .. "}"
    end
end

local function encode_string(val)
    return '"' .. val:gsub('[%z\1-\31\\"]', escape_char) .. '"'
end

local function encode_number(val)
    -- Check for NaN, -inf and inf
    if val ~= val or val <= -math.huge or val >= math.huge then
        error("unexpected number value '" .. tostring(val) .. "'")
    end
    return string.format("%.14g", val)
end

local type_func_map = {
    ["nil"] = encode_nil,
    ["table"] = encode_table,
    ["string"] = encode_string,
    ["number"] = encode_number,
    ["boolean"] = tostring
}

encode = function(val, stack)
    local t = type(val)
    local f = type_func_map[t]
    if f then
        return f(val, stack)
    end
    error("unexpected type '" .. t .. "'")
end

function json.encode(val)
    return (encode(val))
end

-------------------------------------------------------------------------------
-- Decode
-------------------------------------------------------------------------------

local parse

local function create_set(...)
    local res = {}
    for i = 1, select("#", ...) do
        res[select(i, ...)] = true
    end
    return res
end

local space_chars = create_set(" ", "\t", "\r", "\n")
local delim_chars = create_set(" ", "\t", "\r", "\n", "]", "}", ",")
local escape_chars = create_set("\\", "/", '"', "b", "f", "n", "r", "t", "u")
local literals = create_set("true", "false", "null")

local literal_map = {
    ["true"] = true,
    ["false"] = false,
    ["null"] = nil
}

local function next_char(str, idx, set, negate)
    for i = idx, #str do
        if set[str:sub(i, i)] ~= negate then
            return i
        end
    end
    return #str + 1
end

local function decode_error(str, idx, msg)
    local line_count = 1
    local col_count = 1
    for i = 1, idx - 1 do
        col_count = col_count + 1
        if str:sub(i, i) == "\n" then
            line_count = line_count + 1
            col_count = 1
        end
    end
    error(string.format("%s at line %d col %d", msg, line_count, col_count))
end

local function codepoint_to_utf8(n)
    -- http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa
    local f = math.floor
    if n <= 0x7f then
        return string.char(n)
    elseif n <= 0x7ff then
        return string.char(f(n / 64) + 192, n % 64 + 128)
    elseif n <= 0xffff then
        return string.char(f(n / 4096) + 224, f(n % 4096 / 64) + 128, n % 64 + 128)
    elseif n <= 0x10ffff then
        return string.char(f(n / 262144) + 240, f(n % 262144 / 4096) + 128, f(n % 4096 / 64) + 128, n % 64 + 128)
    end
    error(string.format("invalid unicode codepoint '%x'", n))
end

local function parse_unicode_escape(s)
    local n1 = tonumber(s:sub(3, 6), 16)
    local n2 = tonumber(s:sub(9, 12), 16)
    -- Surrogate pair?
    if n2 then
        return codepoint_to_utf8((n1 - 0xd800) * 0x400 + (n2 - 0xdc00) + 0x10000)
    else
        return codepoint_to_utf8(n1)
    end
end

local function parse_string(str, i)
    local has_unicode_escape = false
    local has_surrogate_escape = false
    local has_escape = false
    local last
    for j = i + 1, #str do
        local x = str:byte(j)

        if x < 32 then
            decode_error(str, j, "control character in string")
        end

        if last == 92 then -- "\\" (escape char)
            if x == 117 then -- "u" (unicode escape sequence)
                local hex = str:sub(j + 1, j + 5)
                if not hex:find("%x%x%x%x") then
                    decode_error(str, j, "invalid unicode escape in string")
                end
                if hex:find("^[dD][89aAbB]") then
                    has_surrogate_escape = true
                else
                    has_unicode_escape = true
                end
            else
                local c = string.char(x)
                if not escape_chars[c] then
                    decode_error(str, j, "invalid escape char '" .. c .. "' in string")
                end
                has_escape = true
            end
            last = nil

        elseif x == 34 then -- '"' (end of string)
            local s = str:sub(i + 1, j - 1)
            if has_surrogate_escape then
                s = s:gsub("\\u[dD][89aAbB]..\\u....", parse_unicode_escape)
            end
            if has_unicode_escape then
                s = s:gsub("\\u....", parse_unicode_escape)
            end
            if has_escape then
                s = s:gsub("\\.", escape_char_map_inv)
            end
            return s, j + 1

        else
            last = x
        end
    end
    decode_error(str, i, "expected closing quote for string")
end

local function parse_number(str, i)
    local x = next_char(str, i, delim_chars)
    local s = str:sub(i, x - 1)
    local n = tonumber(s)
    if not n then
        decode_error(str, i, "invalid number '" .. s .. "'")
    end
    return n, x
end

local function parse_literal(str, i)
    local x = next_char(str, i, delim_chars)
    local word = str:sub(i, x - 1)
    if not literals[word] then
        decode_error(str, i, "invalid literal '" .. word .. "'")
    end
    return literal_map[word], x
end

local function parse_array(str, i)
    local res = {}
    local n = 1
    i = i + 1
    while 1 do
        local x
        i = next_char(str, i, space_chars, true)
        -- Empty / end of array?
        if str:sub(i, i) == "]" then
            i = i + 1
            break
        end
        -- Read token
        x, i = parse(str, i)
        res[n] = x
        n = n + 1
        -- Next token
        i = next_char(str, i, space_chars, true)
        local chr = str:sub(i, i)
        i = i + 1
        if chr == "]" then
            break
        end
        if chr ~= "," then
            decode_error(str, i, "expected ']' or ','")
        end
    end
    return res, i
end

local function parse_object(str, i)
    local res = {}
    i = i + 1
    while 1 do
        local key, val
        i = next_char(str, i, space_chars, true)
        -- Empty / end of object?
        if str:sub(i, i) == "}" then
            i = i + 1
            break
        end
        -- Read key
        if str:sub(i, i) ~= '"' then
            decode_error(str, i, "expected string for key")
        end
        key, i = parse(str, i)
        -- Read ':' delimiter
        i = next_char(str, i, space_chars, true)
        if str:sub(i, i) ~= ":" then
            decode_error(str, i, "expected ':' after key")
        end
        i = next_char(str, i + 1, space_chars, true)
        -- Read value
        val, i = parse(str, i)
        -- Set
        res[key] = val
        -- Next token
        i = next_char(str, i, space_chars, true)
        local chr = str:sub(i, i)
        i = i + 1
        if chr == "}" then
            break
        end
        if chr ~= "," then
            decode_error(str, i, "expected '}' or ','")
        end
    end
    return res, i
end

local char_func_map = {
    ['"'] = parse_string,
    ["0"] = parse_number,
    ["1"] = parse_number,
    ["2"] = parse_number,
    ["3"] = parse_number,
    ["4"] = parse_number,
    ["5"] = parse_number,
    ["6"] = parse_number,
    ["7"] = parse_number,
    ["8"] = parse_number,
    ["9"] = parse_number,
    ["-"] = parse_number,
    ["t"] = parse_literal,
    ["f"] = parse_literal,
    ["n"] = parse_literal,
    ["["] = parse_array,
    ["{"] = parse_object
}

parse = function(str, idx)
    local chr = str:sub(idx, idx)
    local f = char_func_map[chr]
    if f then
        return f(str, idx)
    end
    decode_error(str, idx, "unexpected character '" .. chr .. "'")
end

function json.decode(str)
    if type(str) ~= "string" then
        error("expected argument of type string, got " .. type(str))
    end
    local res, idx = parse(str, next_char(str, 1, space_chars, true))
    idx = next_char(str, idx, space_chars, true)
    if idx <= #str then
        decode_error(str, idx, "trailing garbage")
    end
    return res
end

-- ‐-------------------------
-- End of json.lua
----------------------------
script_title = "🧰 BadCase's Toolbox 🧰\nGame: " .. gg.getTargetInfo().label .. "\nPackage: " .. gg.getTargetPackage()
dataPath = gg.EXT_STORAGE .. "/BC_DATA/"
pluginsDataPath = gg.EXT_STORAGE .. "/BC_DATA/plugins/"
configDataPath = gg.EXT_STORAGE .. "/BC_DATA/config/"
toolboxInstaller = {
    filesTable = {
        [1] = {
            file_name = "toolbox_core.lua",
            file_data = ""
        },
        [2] = {
            file_name = "plugin_bc_class_field_search.lua",
            file_data = "Y2xhc3NGaWVsZFNlYXJjaGVyID0gew0KCS0tW1sNCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCgkNCgljbGFzc0ZpZWxkU2VhcmNoZXIuaG9tZSgpDQoJDQoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoJXV0gLS0NCiAgICBob21lID0gZnVuY3Rpb24oKQ0KICAgICAgICB3aGlsZSAobmlsKSBkbw0KICAgICAgICAgICAgbG9jYWwgaG9tZVZhbCA9IHt9DQogICAgICAgICAgICBpZiAoaG9tZVZhbC5ob21lVmFsKSB0aGVuDQogICAgICAgICAgICAgICAgaG9tZVZhbC5ob21lVmFsID0gKGhvbWVWYWwuaG9tZVZhbChob21lVmFsKSkNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICAgICAgZ2cuc2V0UmFuZ2VzKGdnLlJFR0lPTl9DX0FMTE9DIHwgZ2cuUkVHSU9OX0FOT05ZTU9VUykNCiAgICAgICAgbG9jYWwgc3RhcnRfYWRkcmVzcyA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICAgICAgZ2cuc2VhcmNoUG9pbnRlcigxMDAwKQ0KICAgICAgICBsb2NhbCBwb2ludGVyc190byA9IGdnLmdldFJlc3VsdHMoZ2cuZ2V0UmVzdWx0c0NvdW50KCkpDQogICAgICAgIGxvY2FsIGZpZWxkX29mZnNldCA9IDB4MA0KICAgICAgICBmb3IgaSwgdiBpbiBwYWlycyhwb2ludGVyc190bykgZG8NCiAgICAgICAgICAgIHBvaW50ZXJzX3RvW2ldLmFkZHJlc3MgPSB2LnZhbHVlDQogICAgICAgIGVuZA0KICAgICAgICB0YWJsZS5pbnNlcnQocG9pbnRlcnNfdG8sIHN0YXJ0X2FkZHJlc3NbMV0pDQogICAgICAgIGdnLmxvYWRSZXN1bHRzKHBvaW50ZXJzX3RvKQ0KICAgICAgICBsb2NhbCBwb2ludGVyc190byA9IGdnLmdldFJlc3VsdHMoZ2cuZ2V0UmVzdWx0c0NvdW50KCkpDQogICAgICAgIGZvciBpLCB2IGluIHBhaXJzKHBvaW50ZXJzX3RvKSBkbw0KICAgICAgICAgICAgaWYgdi5hZGRyZXNzID09IHN0YXJ0X2FkZHJlc3NbMV0uYWRkcmVzcyB0aGVuDQogICAgICAgICAgICAgICAgbG9jYWwgY2xhc3NfcG9pbnRlciA9IHtwb2ludGVyc190b1tpIC0gMV19DQogICAgICAgICAgICAgICAgZmllbGRfb2Zmc2V0ID0gaGV4X28ocG9pbnRlcnNfdG9baV0uYWRkcmVzcyAtIHBvaW50ZXJzX3RvW2kgLSAxXS5hZGRyZXNzKQ0KICAgICAgICAgICAgICAgIGdnLmxvYWRSZXN1bHRzKGNsYXNzX3BvaW50ZXIpDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICAgICAgbG9jYWwgY2xhc3NfcG9pbnRlciA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICAgICAgbG9jYWwgY2xhc3NfbmFtZV9wb2ludGVyID0ge30NCiAgICAgICAgY2xhc3NfbmFtZV9wb2ludGVyWzFdID0ge30NCiAgICAgICAgY2xhc3NfbmFtZV9wb2ludGVyWzFdLmFkZHJlc3MgPSBjbGFzc19wb2ludGVyWzFdLnZhbHVlICsgOA0KICAgICAgICBjbGFzc19uYW1lX3BvaW50ZXJbMV0uZmxhZ3MgPSBnZy5UWVBFX0RXT1JEDQogICAgICAgIGxvY2FsIGNsYXNzX25hbWVfYWRkcmVzcyA9IGdnLmdldFZhbHVlcyhjbGFzc19uYW1lX3BvaW50ZXIpDQogICAgICAgIGNsYXNzX25hbWVfYWRkcmVzcyA9IGNsYXNzX25hbWVfYWRkcmVzc1sxXS52YWx1ZQ0KICAgICAgICBnZXRfY2xhc3NfbmFtZSA9IHt9DQogICAgICAgIG9mZnNldCA9IDANCiAgICAgICAgZm9yIGkgPSAxLCAxMDAgZG8NCiAgICAgICAgICAgIGdldF9jbGFzc19uYW1lW2ldID0ge30NCiAgICAgICAgICAgIGdldF9jbGFzc19uYW1lW2ldLmFkZHJlc3MgPSBjbGFzc19uYW1lX2FkZHJlc3MgKyBvZmZzZXQNCiAgICAgICAgICAgIGdldF9jbGFzc19uYW1lW2ldLmZsYWdzID0gZ2cuVFlQRV9CWVRFDQogICAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyAxDQogICAgICAgIGVuZA0KICAgICAgICBnZXRfY2xhc3NfbmFtZSA9IGdnLmdldFZhbHVlcyhnZXRfY2xhc3NfbmFtZSkNCiAgICAgICAgY2xhc3NfbmFtZSA9ICIiDQogICAgICAgIGZvciBpbmRleCwgdmFsdWUgaW4gcGFpcnMoZ2V0X2NsYXNzX25hbWUpIGRvDQogICAgICAgICAgICBpZiB2YWx1ZS52YWx1ZSA+PSAwIGFuZCB2YWx1ZS52YWx1ZSA8PSAyNTUgdGhlbg0KICAgICAgICAgICAgICAgIGNsYXNzX25hbWUgPSBjbGFzc19uYW1lIC4uIHN0cmluZy5jaGFyKHZhbHVlLnZhbHVlKQ0KICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBpZiB2YWx1ZS52YWx1ZSA9PSAwIHRoZW4NCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KICAgICAgICBjbGFzc19uYW1lID0gY2xhc3NfbmFtZTpnc3ViKCIAIiwgIiIpDQogICAgICAgIGxvY2FsIGZpZWxkc19wb2ludGVyID0ge30NCiAgICAgICAgZmllbGRzX3BvaW50ZXJbMV0gPSB7fQ0KICAgICAgICBmaWVsZHNfcG9pbnRlclsxXS5hZGRyZXNzID0gY2xhc3NfcG9pbnRlclsxXS52YWx1ZSArIDB4NDANCiAgICAgICAgZmllbGRzX3BvaW50ZXJbMV0uZmxhZ3MgPSBnZy5UWVBFX0RXT1JEDQogICAgICAgIGxvY2FsIGZpZWxkc19wb2ludGVyX2FkZHJlc3MgPSBnZy5nZXRWYWx1ZXMoZmllbGRzX3BvaW50ZXIpDQogICAgICAgIGxvY2FsIGZpZWxkc19zdGFydCA9IHt9DQogICAgICAgIGZpZWxkc19zdGFydFsxXSA9IHt9DQogICAgICAgIGZpZWxkc19zdGFydFsxXS5hZGRyZXNzID0gZmllbGRzX3BvaW50ZXJfYWRkcmVzc1sxXS52YWx1ZQ0KICAgICAgICBmaWVsZHNfc3RhcnRbMV0uZmxhZ3MgPSBnZy5UWVBFX0RXT1JEDQogICAgICAgIGdnLmxvYWRSZXN1bHRzKGZpZWxkc19zdGFydCkNCiAgICAgICAgZmllbGRzX3N0YXJ0ID0gZ2cuZ2V0UmVzdWx0cygxKQ0KICAgICAgICBnZy5jbGVhclJlc3VsdHMoKQ0KICAgICAgICBnZy5zZWFyY2hOdW1iZXIodG9udW1iZXIoZmllbGRfb2Zmc2V0KSwgZ2cuVFlQRV9EV09SRCwgZmFsc2UsIGdnLlNJR05fRVFVQUwsIGZpZWxkc19zdGFydFsxXS5hZGRyZXNzLA0KICAgICAgICAgICAgZmllbGRzX3N0YXJ0WzFdLmFkZHJlc3MgKyAxMDAwLCAxKQ0KICAgICAgICBsb2NhbCBmaWVsZF9mb3VuZCA9IGdnLmdldFJlc3VsdHMoMSkNCiAgICAgICAgbG9jYWwgZmllbGRfbmFtZV9wb2ludGVyID0ge30NCiAgICAgICAgZmllbGRfbmFtZV9wb2ludGVyWzFdID0ge30NCiAgICAgICAgZmllbGRfbmFtZV9wb2ludGVyWzFdLmFkZHJlc3MgPSBmaWVsZF9mb3VuZFsxXS5hZGRyZXNzIC0gMTINCiAgICAgICAgZmllbGRfbmFtZV9wb2ludGVyWzFdLmZsYWdzID0gZ2cuVFlQRV9EV09SRA0KICAgICAgICBmaWVsZF9uYW1lX3BvaW50ZXIgPSBnZy5nZXRWYWx1ZXMoZmllbGRfbmFtZV9wb2ludGVyKQ0KICAgICAgICBnZXRfZmllbGRfbmFtZSA9IHt9DQogICAgICAgIG9mZnNldCA9IDANCiAgICAgICAgZm9yIGkgPSAxLCAxMDAgZG8NCiAgICAgICAgICAgIGdldF9maWVsZF9uYW1lW2ldID0ge30NCiAgICAgICAgICAgIGdldF9maWVsZF9uYW1lW2ldLmFkZHJlc3MgPSBmaWVsZF9uYW1lX3BvaW50ZXJbMV0udmFsdWUgKyBvZmZzZXQNCiAgICAgICAgICAgIGdldF9maWVsZF9uYW1lW2ldLmZsYWdzID0gZ2cuVFlQRV9CWVRFDQogICAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyAxDQogICAgICAgIGVuZA0KICAgICAgICBnZXRfZmllbGRfbmFtZSA9IGdnLmdldFZhbHVlcyhnZXRfZmllbGRfbmFtZSkNCiAgICAgICAgZmllbGRfbmFtZSA9ICIiDQogICAgICAgIGZvciBpbmRleCwgdmFsdWUgaW4gcGFpcnMoZ2V0X2ZpZWxkX25hbWUpIGRvDQogICAgICAgICAgICBpZiB2YWx1ZS52YWx1ZSA+PSAwIGFuZCB2YWx1ZS52YWx1ZSA8PSAyNTUgdGhlbg0KICAgICAgICAgICAgICAgIGZpZWxkX25hbWUgPSBmaWVsZF9uYW1lIC4uIHN0cmluZy5jaGFyKHZhbHVlLnZhbHVlKQ0KICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBpZiB2YWx1ZS52YWx1ZSA9PSAwIHRoZW4NCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KICAgICAgICBnZy5sb2FkUmVzdWx0cyhzdGFydF9hZGRyZXNzKQ0KICAgICAgICBnZy5hbGVydChzY3JpcHRfdGl0bGUgLi4gIlxuXG7ihLnvuI8gQ2xhc3MvRmllbGQgc2VhcmNoIHJlc3VsdC4g4oS577iPXG5DbGFzcyBOYW1lOiAiIC4uIGNsYXNzX25hbWUgLi4gIlxuRmllbGQgTmFtZTogIiAuLiBmaWVsZF9uYW1lIC4uICJcbkZpZWxkIE9mZnNldDogIiAuLiBmaWVsZF9vZmZzZXQpDQogICAgICAgIHBsdWdpbk1hbmFnZXIuZGVmYXVsdEhhbmRsZXIoImNsYXNzX3Jlc3VsdHMiLCBjbGFzc19uYW1lKQ0KICAgIGVuZA0KfQ0KDQpjbGFzc0ZpZWxkU2VhcmNoZXIuaG9tZSgpDQo"
        },
        [3] = {
            file_name = "plugin_bc_enum_search_results.lua",
            file_data = "ZW51bVNlYXJjaFJlc3VsdHMgPSB7DQogICAgLS1bWw0KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KCQ0KCWVudW1TZWFyY2hSZXN1bHRzLmhvbWUoKQ0KCQ0KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KCV1dIC0tDQogICAgaG9tZSA9IGZ1bmN0aW9uKCkNCiAgICAgICAgbG9jYWwgY2xlYW5lZF90YWJsZSA9IHt9DQogICAgICAgIGxvY2FsIGFkZGVkX3RhYmxlID0ge30NCiAgICAgICAgZm9yIGksIHYgaW4gcGFpcnMoZHVtcFNlYXJjaGVyLmVudW1SZXN1bHRzKSBkbw0KICAgICAgICAgICAgaWYgbm90IGFkZGVkX3RhYmxlW3ZbMV1dIHRoZW4NCiAgICAgICAgICAgICAgICBhZGRlZF90YWJsZVt2WzFdXSA9IHRydWUNCiAgICAgICAgICAgICAgICBsb2NhbCBuYW1lX3N0cmluZyA9ICIiDQogICAgICAgICAgICAgICAgZm9yIGluZGV4LCB2YWx1ZSBpbiBwYWlycyhkdW1wX2NzX3RhYmxlW3ZbMV1dLmZpZWxkcykgZG8NCiAgICAgICAgICAgICAgICAgICAgaWYgbmFtZV9zdHJpbmcgPT0gIiIgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgbmFtZV9zdHJpbmcgPSB2YWx1ZS5lbnVtX3R5cGUgLi4gIlxuIg0KICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICAgICAgbmFtZV9zdHJpbmcgPSBuYW1lX3N0cmluZyAuLiB2YWx1ZS5lbnVtX25hbWUgLi4gIsKgPcKgIiAuLiB2YWx1ZS5lbnVtX3ZhbHVlIC4uICJcbiINCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICBjbGVhbmVkX3RhYmxlWyNjbGVhbmVkX3RhYmxlICsgMV0gPSBuYW1lX3N0cmluZw0KICAgICAgICAgICAgZW5kDQogICAgICAgIGVuZA0KICAgICAgICBsb2NhbCByZXN1bHRzX21lbnUgPSBnZy5jaG9pY2UoY2xlYW5lZF90YWJsZSwgbmlsLCBzY3JpcHRfdGl0bGUgLi4gIlxuXG7ihLnvuI8gRW51bSBzZWFyY2ggcmVzdWx0cy4g4oS577iPIikNCiAgICAgICAgaWYgcmVzdWx0c19tZW51IH49IG5pbCB0aGVuDQogICAgICAgICAgICBnZy5jb3B5VGV4dChjbGVhbmVkX3RhYmxlW3Jlc3VsdHNfbWVudV0pDQogICAgICAgICAgICBnZy50b2FzdChzY3JpcHRfdGl0bGUgLi4gIlxuXG7ihLnvuI8gTGlzdCBDb3BpZWQgVG8gQ2xpcGJvYXJkIOKEue+4jyIpDQogICAgICAgIGVuZA0KICAgIGVuZA0KfQ0KDQplbnVtU2VhcmNoUmVzdWx0cy5ob21lKCkNCg"
        },
        [4] = {
            file_name = "plugin_bc_lib_dumper.lua",
            file_data = "bGliRHVtcGVyID0gew0KICAgIC0tW1sNCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCgkNCglsaWJEdW1wZXIuZHVtcEZpbGUoKQ0KCQ0KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KCV1dIC0tDQogICAgZHVtcEZpbGUgPSBmdW5jdGlvbihzdGFydF9hZGRyZXNzLCBlbmRfYWRkcmVzcykNCiAgICAgICAgbG9jYWwgc3RhcnRfYWRkcmVzc19mbmFtZSA9IHN0cmluZy5sb3dlcihzdHJpbmcuc3ViKHN0YXJ0X2FkZHJlc3MsIDMpKQ0KICAgICAgICBsb2NhbCBlbmRfYWRkcmVzc19mbmFtZSA9IHN0cmluZy5sb3dlcihzdHJpbmcuc3ViKGVuZF9hZGRyZXNzLCAzKSkNCiAgICAgICAgZ2cuZHVtcE1lbW9yeSh0b251bWJlcihzdGFydF9hZGRyZXNzKSwgdG9udW1iZXIoZW5kX2FkZHJlc3MpLA0KICAgICAgICAgICAgZ2cuRVhUX1NUT1JBR0UgLi4gIi9CQ19EQVRBLyIgLi4gZ2FtZV9wYXRoIC4uICIvZHVtcC8iLCBnZy5EVU1QX1NLSVBfU1lTVEVNX0xJQlMpDQogICAgICAgIGdnLmFsZXJ0KHNjcmlwdF90aXRsZSAuLiAiXG5cbuKEue+4jyBEYXRhIER1bXBlZCDihLnvuI9cblxuU2F2ZWQgdG86ICIgLi4gZ2cuRVhUX1NUT1JBR0UgLi4gIi9CQ19EQVRBLyIgLi4gZ2FtZV9wYXRoIC4uICIvZHVtcC8gIikNCiAgICBlbmQsDQogICAgLS1bWw0KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KCQ0KCWxpYkR1bXBlci5zZWxlY3RMaWIoKQ0KCQ0KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KCV1dIC0tDQogICAgc2VsZWN0TGliID0gZnVuY3Rpb24oKQ0KICAgICAgICBsb2NhbCBsaWJfbmFtZV9nZW5fc2NyaXB0ID0ge30NCiAgICAgICAgbG9jYWwgbGliX3NlbGVjdG9yID0ge30NCiAgICAgICAgbG9jYWwgbGliX3NlbGVjdG9yX3N0YXJ0ID0ge30NCiAgICAgICAgbG9jYWwgbGliX3NlbGVjdG9yX2VuZCA9IHt9DQogICAgICAgIGxvY2FsIGNoZWNrX2xpYnMgPSBnZy5nZXRSYW5nZXNMaXN0KCkNCiAgICAgICAgZm9yIGssIHYgaW4gcGFpcnMoY2hlY2tfbGlicykgZG8NCiAgICAgICAgICAgIGlmIHN0cmluZy5tYXRjaChjaGVja19saWJzW2tdWyJuYW1lIl0sICIlLmRhdCIpIG9yIA0KCQkJCXN0cmluZy5tYXRjaChjaGVja19saWJzW2tdWyJuYW1lIl0sICIlW3N0YWNrJV0iKSBvcg0KICAgICAgICAgICAgICAgIHN0cmluZy5tYXRjaChjaGVja19saWJzW2tdWyJuYW1lIl0sICIvdmVuZG9yLyIpIG9yIA0KCQkJCXN0cmluZy5tYXRjaChjaGVja19saWJzW2tdWyJuYW1lIl0sICIvc3lzdGVtLyIpIG9yDQogICAgICAgICAgICAgICAgc3RyaW5nLm1hdGNoKGNoZWNrX2xpYnNba11bIm5hbWUiXSwgIi9kZXYvIikgb3IgDQoJCQkJc3RyaW5nLm1hdGNoKGNoZWNrX2xpYnNba11bIm5hbWUiXSwgIiVbaGVhcCVdIikgb3INCiAgICAgICAgICAgICAgICBzdHJpbmcubWF0Y2goY2hlY2tfbGlic1trXVsibmFtZSJdLCAiJS5hcnQiKSBvciANCgkJCQlzdHJpbmcubWF0Y2goY2hlY2tfbGlic1trXVsibmFtZSJdLCAiYW5vbl9pbm9kZToiKSBvcg0KICAgICAgICAgICAgICAgIHN0cmluZy5tYXRjaChjaGVja19saWJzW2tdWyJuYW1lIl0sICJkZWxldGVkIikgb3IgDQoJCQkJc3RyaW5nLm1hdGNoKGNoZWNrX2xpYnNba11bIm5hbWUiXSwgImFub246Iikgb3INCiAgICAgICAgICAgICAgICBzdHJpbmcubWF0Y2goY2hlY2tfbGlic1trXVsibmFtZSJdLCAiJS50dGYiKSBvciANCgkJCQlzdHJpbmcubWF0Y2goY2hlY2tfbGlic1trXVsibmFtZSJdLCAiLiIpID09IG5pbCB0aGVuDQogICAgICAgICAgICAgICAgY2hlY2tfbGlic1trXSA9IG5pbA0KICAgICAgICAgICAgZWxzZWlmIGNoZWNrX2xpYnNba11bIm5hbWUiXTpmaW5kKCIuc28kIikgdGhlbg0KICAgICAgICAgICAgICAgIGdldF9zaXplX2FycmF5ID0ge30NCiAgICAgICAgICAgICAgICBmb3IgaSwgdiBpbiBwYWlycyhjaGVja19saWJzW2tdKSBkbw0KICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoZ2V0X3NpemVfYXJyYXksIHYpDQogICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgbG9jYWwgZmlsZV9zaXplID0gdG9udW1iZXIoZ2V0X3NpemVfYXJyYXlbMV0pIC0gdG9udW1iZXIoZ2V0X3NpemVfYXJyYXlbNl0pDQogICAgICAgICAgICAgICAgbG9jYWwgZmlsZV9zdGFydCA9IHRvbnVtYmVyKGdldF9zaXplX2FycmF5WzZdKQ0KICAgICAgICAgICAgICAgIGxvY2FsIGZpbGVfZW5kID0gdG9udW1iZXIoZ2V0X3NpemVfYXJyYXlbMV0pDQogICAgICAgICAgICAgICAgaWYgZmlsZV9zaXplIDwgNTEyMDAwMCB0aGVuDQogICAgICAgICAgICAgICAgICAgIGNoZWNrX2xpYnNba10gPSBuaWwNCiAgICAgICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGRpdmlkZV9ieSA9ICIxMDI0MDAwIg0KICAgICAgICAgICAgICAgICAgICBsb2NhbCBzaXplX21hdGggPSB0b251bWJlcihmaWxlX3NpemUpIC8gdG9udW1iZXIoZGl2aWRlX2J5KQ0KICAgICAgICAgICAgICAgICAgICBsb2NhbCBzaXplX2Rpc3BsYXkgPSBzaXplX21hdGggLi4gIk1CIg0KICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQobGliX25hbWVfZ2VuX3NjcmlwdCwgY2hlY2tfbGlic1trXVsibmFtZSJdKQ0KICAgICAgICAgICAgICAgICAgICBsb2NhbCBmbGlibmFtZSA9IGNoZWNrX2xpYnNba11bIm5hbWUiXQ0KICAgICAgICAgICAgICAgICAgICBpZiBzdHJpbmcuZmluZCh2WyJuYW1lIl0sICJsaWJpbDJjcHAuc28iKSBvciBzdHJpbmcuZmluZCh2WyJuYW1lIl0sICJzcGxpdF9jb25maWcuYXJtZWFiaV92N2EuYXBrIikgb3INCiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy5maW5kKHZbIm5hbWUiXSwgInNwbGl0X2NvbmZpZy5hcm02NF92OGEuYXBrIikgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgbWVudV9zdHJpbmcgPSAi44Cw77iP44Cw77iP44Cw77iP44Cw77iP44Cw77iP44Cw77iP44Cw77iP44Cw77iP44Cw77iP44Cw77iP44Cw77iP44Cw77iPXG5OYW1lOiAiIC4uDQoJCQkJCQkJCQl2WyJuYW1lIl0gLi4gIlxuUmFuZ2U6ICIgLi4gdi5zdGF0ZSAuLiAiXG5TdGFydCBBZGRyZXNzOiAiIC4uDQoJCQkJCQkJCQlsaWJEdW1wZXIuaGV4X28oZ2V0X3NpemVfYXJyYXlbNl0pIC4uICJcbkVuZCBBZGRyZXNzOiAiIC4uDQoJCQkJCQkJCQlsaWJEdW1wZXIuaGV4X28oZ2V0X3NpemVfYXJyYXlbMV0pIC4uICJcblNpemU6ICIgLi4gc2l6ZV9kaXNwbGF5IC4uDQoJCQkJCQkJCQkiXG7jgLDvuI/jgLDvuI/jgLDvuI/jgLDvuI/jgLDvuI/jgLDvuI/jgLDvuI/jgLDvuI/jgLDvuI/jgLDvuI/jgLDvuI/jgLDvuI8iDQogICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVfc3RyaW5nID0gIuKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgVxuTmFtZTogIiAuLiB2WyJuYW1lIl0gLi4gIlxuUmFuZ2U6ICIgLi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuc3RhdGUgLi4gIlxuU3RhcnQgQWRkcmVzczogIiAuLiBsaWJEdW1wZXIuaGV4X28oZ2V0X3NpemVfYXJyYXlbNl0pIC4uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXG5FbmQgQWRkcmVzczogIiAuLiBsaWJEdW1wZXIuaGV4X28oZ2V0X3NpemVfYXJyYXlbMV0pIC4uICJcblNpemU6ICIgLi4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVfZGlzcGxheSAuLiAiXG7ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiDQogICAgICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgICAgICAgICBpZiBzdHJpbmcuZmluZChmbGlibmFtZSwgIi0iKSBhbmQgc3RyaW5nLmZpbmQoZmxpYm5hbWUsICI9PSIpIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGxpYl9zZWFyY2ggPSBzdHJpbmcuZmluZChmbGlibmFtZSwgIi0iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgbGliX3NlYXJjaDIgPSBzdHJpbmcuZmluZChmbGlibmFtZSwgIj09IikNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGxpYm5hbWVfcGFydDEgPSBzdHJpbmcuc3ViKGZsaWJuYW1lLCAxLCBsaWJfc2VhcmNoIC0gMSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGxpYm5hbWVfcGFydDIgPSBzdHJpbmcuc3ViKGZsaWJuYW1lLCBsaWJfc2VhcmNoMiArIDIpDQogICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQobGliX3NlbGVjdG9yLCBtZW51X3N0cmluZykNCiAgICAgICAgICAgICAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGxpYl9zZWxlY3RvciwgbWVudV9zdHJpbmcpDQogICAgICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQobGliX3NlbGVjdG9yX3N0YXJ0LCBmaWxlX3N0YXJ0KQ0KICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQobGliX3NlbGVjdG9yX2VuZCwgZmlsZV9lbmQpDQogICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBlbmQNCiAgICAgICAgZW5kDQogICAgICAgIDo6c2VsZWN0X2xpYjo6DQogICAgICAgIGxvY2FsIGggPSBnZy5jaG9pY2UobGliX3NlbGVjdG9yLCBuaWwsIHNjcmlwdF90aXRsZSAuLiAiXG5cbuKEue+4jyBTZWxlY3QgTGlicmFyeSBUbyBEdW1wIOKEue+4jyIpDQogICAgICAgIGlmIGggPT0gbmlsIHRoZW4NCiAgICAgICAgICAgIGdvdG8gZW5kX3NlbGVjdA0KICAgICAgICBlbHNlDQogICAgICAgICAgICBsb2NhbCBsaWJfbmFtZSA9IGxpYl9uYW1lX2dlbl9zY3JpcHRbaF0NCiAgICAgICAgICAgIGZvciBzdHIgaW4gc3RyaW5nLmdtYXRjaChsaWJfbmFtZSwgIihbXi9dKykiKSBkbw0KICAgICAgICAgICAgICAgIGZpeGVkX2xpYl9uYW1lID0gc3RyDQogICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIEJBU0VBRERSID0gbGliX3NlbGVjdG9yX3N0YXJ0W2hdDQogICAgICAgICAgICBpZiBsaWJfc2VsZWN0b3JbaCArIDJdIGFuZCBzdHJpbmcuZ3N1YihsaWJfc2VsZWN0b3JbaF0sICIoLitzbyApLisiLCAiJTEiKSA9PSBzdHJpbmcuZ3N1YihsaWJfc2VsZWN0b3JbaCArIDJdLCAiKC4rc28gKS4rIiwgIiUxIikgdGhlbg0KICAgICAgICAgICAgICAgIEVOREFERFIgPSBsaWJfc2VsZWN0b3JfZW5kW2ggKyAyXQ0KICAgICAgICAgICAgZWxzZWlmIHN0cmluZy5nc3ViKGxpYl9zZWxlY3RvcltoXSwgIiguK3NvICkuKyIsICIlMSIpID09IHN0cmluZy5nc3ViKGxpYl9zZWxlY3RvcltoICsgMV0sICIoLitzbyApLisiLCAiJTEiKSB0aGVuDQogICAgICAgICAgICAgICAgRU5EQUREUiA9IGxpYl9zZWxlY3Rvcl9lbmRbaCArIDFdDQogICAgICAgICAgICBlbHNlDQogICAgICAgICAgICAgICAgRU5EQUREUiA9IGxpYl9zZWxlY3Rvcl9lbmRbaF0NCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICAgICAgZ2cudG9hc3Qoc2NyaXB0X3RpdGxlIC4uICJcblxu4pyFICIgLi4gZml4ZWRfbGliX25hbWUgLi4gIiBTZWxlY3RlZCDinIUiKQ0KICAgICAgICBsaWJEdW1wZXIuZHVtcEZpbGUoQkFTRUFERFIsIEVOREFERFIpDQogICAgICAgIDo6ZW5kX3NlbGVjdDo6DQogICAgZW5kLA0KICAgIGhleF9vID0gZnVuY3Rpb24obikNCiAgICAgICAgcmV0dXJuICIweCIgLi4gc3RyaW5nLnVwcGVyKHN0cmluZy5mb3JtYXQoIiV4IiwgbikpDQogICAgZW5kDQp9DQoNCmxpYkR1bXBlci5zZWxlY3RMaWIoKQ0K"
        },
        [5] = {
            file_name = "plugin_bc_save_list.lua",
            file_data = "c2F2ZUxpc3RNYW5hZ2VyID0gew0KICAgIGxpc3QgPSB7fSwNCiAgICAtLVtbDQoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoJDQoJc2F2ZUxpc3RNYW5hZ2VyLmhvbWUoKQ0KCQ0KCS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KCV1dIC0tDQogICAgaG9tZSA9IGZ1bmN0aW9uKCkNCiAgICAgICAgbG9jYWwgbWFpbk1lbnUgPSBnZy5jaG9pY2UoeyLinpUgQWRkIGl0ZW1zIGluIFNhdmVkIFRhYiB0byBTYXZlIExpc3QiLCANCgkJCQkJCQkJCSLimLAgTG9hZCBTYXZlIExpc3QgdG8gU2F2ZWQgVGFiIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICLwn5SAIFJlcGxhY2UgY3VycmVudCBTYXZlIExpc3Qgd2l0aCBpdGVtcyBpbiBTYXZlZCBUYWIifSwgDQoJCQkJCQkJCQluaWwsDQoJCQkJCQkJCQlzY3JpcHRfdGl0bGUgLi4gIlxuXG7ihLnvuI8gU2F2ZSBMaXN0IE1hbmFnZXIg4oS577iPIikNCiAgICAgICAgaWYgbWFpbk1lbnUgfj0gbmlsIHRoZW4NCiAgICAgICAgICAgIGlmIG1haW5NZW51ID09IDEgdGhlbg0KICAgICAgICAgICAgICAgIGZvciBpLCB2IGluIHBhaXJzKGdnLmdldExpc3RJdGVtcygpKSBkbw0KICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoc2F2ZUxpc3RNYW5hZ2VyLmxpc3QsIHYpDQogICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgZ2cuYWxlcnQoc2NyaXB0X3RpdGxlIC4uICJcblxu4oS577iPICIgLi4gI2dnLmdldExpc3RJdGVtcygpIC4uICIgaXRlbXMgYWRkZWQgdG8gdGhlIFNhdmUgTGlzdC4g4oS577iPIikNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgaWYgbWFpbk1lbnUgPT0gMiB0aGVuDQogICAgICAgICAgICAgICAgZ2cuY2xlYXJMaXN0KCkNCiAgICAgICAgICAgICAgICBnZy5hZGRMaXN0SXRlbXMoc2F2ZUxpc3RNYW5hZ2VyLmxpc3QpDQogICAgICAgICAgICAgICAgZ2cuYWxlcnQoc2NyaXB0X3RpdGxlIC4uICJcblxu4oS577iPICIgLi4gI2dnLmdldExpc3RJdGVtcygpIC4uICIgaXRlbXMgbG9hZGVkIGZyb20gU2F2ZSBMaXN0IHRvIFNhdmUgVGFiLiDihLnvuI8iKQ0KICAgICAgICAgICAgZW5kDQogICAgICAgICAgICBpZiBtYWluTWVudSA9PSAzIHRoZW4NCiAgICAgICAgICAgICAgICBsb2NhbCBjb25maXJtID0gZ2cuY2hvaWNlKHsi4pyFIFllcyIsICLinYwgTm8ifSwgbmlsLCBzY3JpcHRfdGl0bGUgLi4gIlxuXG7ihLnvuI8gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlcGxhY2UgeW91ciBjdXJyZW50IFNhdmUgTGlzdD8g4oS577iPXG5UaGlzIGNhbiBub3QgYmUgdW5kb25lLiIpDQogICAgICAgICAgICAgICAgaWYgY29uZmlybSB+PSBuaWwgdGhlbg0KICAgICAgICAgICAgICAgICAgICBpZiBjb25maXJtID09IDEgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUxpc3RNYW5hZ2VyLmxpc3QgPSBnZy5nZXRMaXN0SXRlbXMoKQ0KICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICAgICAgZ2cuYWxlcnQoc2NyaXB0X3RpdGxlIC4uICJcblxu4oS577iPIFNhdmUgTGlzdCByZXBsYWNlZCB3aXRoIGl0ZW1zIGluIFNhdmVkIFRhYi4g4oS577iPIikNCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICBlbmQNCn0NCg0Kc2F2ZUxpc3RNYW5hZ2VyLmhvbWUoKQ0K"
        },
        [6] = {
            file_name = "plugin_bc_field_search_results.lua",
            file_data = "ZmllbGRTZWFyY2hSZXN1bHRzID0gew0KICAgIC0tW1sNCgktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCgkNCglmaWVsZFNlYXJjaFJlc3VsdHMuaG9tZSgpDQoJDQoJLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoJXV0gLS0NCiAgICBob21lID0gZnVuY3Rpb24oKQ0KICAgICAgICBsb2NhbCByZXN1bHRzID0ge30NCiAgICAgICAgbG9jYWwgY2xhc3NfbmFtZXMgPSB7fQ0KICAgICAgICBmb3IgaSwgdiBpbiBwYWlycyhkdW1wU2VhcmNoZXIuZmllbGRSZXN1bHRzKSBkbw0KICAgICAgICAgICAgbG9jYWwgbmFtZV9zdHJpbmcgPSAiTmFtZXNwYWNlOiAiIC4uIGR1bXBfY3NfdGFibGVbdlsxXV0ubmFtZXNwYWNlIC4uICJcbiINCiAgICAgICAgICAgIGlmIGR1bXBfY3NfdGFibGVbdlsxXV0uY2xhc3MgdGhlbg0KICAgICAgICAgICAgICAgIG5hbWVfc3RyaW5nID0gbmFtZV9zdHJpbmcgLi4gIkNsYXNzIE5hbWU6ICIgLi4gZHVtcF9jc190YWJsZVt2WzFdXS5jbGFzcyAuLiAiXG4iDQogICAgICAgICAgICBlbHNlaWYgZHVtcF9jc190YWJsZVt2WzFdXS5zdHJ1Y3QgdGhlbg0KICAgICAgICAgICAgICAgIG5hbWVfc3RyaW5nID0gbmFtZV9zdHJpbmcgLi4gIlN0cnVjdCBOYW1lOiAiIC4uIGR1bXBfY3NfdGFibGVbdlsxXV0uc3RydWN0IC4uICJcbiINCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgbmFtZV9zdHJpbmcgPSBuYW1lX3N0cmluZyAuLiAiRmllbGQgTmFtZTogIiAuLiBkdW1wX2NzX3RhYmxlW3ZbMV1dLmZpZWxkc1t2WzJdXS5maWVsZF9uYW1lIC4uICJcbiINCiAgICAgICAgICAgIG5hbWVfc3RyaW5nID0gbmFtZV9zdHJpbmcgLi4gIkZpZWxkIFR5cGU6ICIgLi4gZHVtcF9jc190YWJsZVt2WzFdXS5maWVsZHNbdlsyXV0uZmllbGRfdHlwZSAuLiAiXG4iDQogICAgICAgICAgICBuYW1lX3N0cmluZyA9IG5hbWVfc3RyaW5nIC4uICJGaWVsZCBPZmZzZXQ6ICIgLi4gZHVtcF9jc190YWJsZVt2WzFdXS5maWVsZHNbdlsyXV0uZmllbGRfb2Zmc2V0IC4uICJcbiINCiAgICAgICAgICAgIHJlc3VsdHNbI3Jlc3VsdHMgKyAxXSA9IG5hbWVfc3RyaW5nDQogICAgICAgICAgICBpZiBkdW1wX2NzX3RhYmxlW3ZbMV1dLmNsYXNzIHRoZW4NCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lc1sjY2xhc3NfbmFtZXMgKyAxXSA9IHN0cmluZy5nc3ViKGR1bXBfY3NfdGFibGVbdlsxXV0uY2xhc3MsICIuKyBjbGFzcyAoLispIC4rIiwgIiUxIik6Z3N1YigiIC8vIFR5cGVEZWZJbmRleC4rIiwgIiIpOmdzdWIoIiguKykgOiAuKyIsICIlMSIpOmdzdWIoIiguKyksIC4rIiwgIiUxIik6Z3N1YigiIDoiLCAiIikNCiAgICAgICAgICAgIGVsc2VpZiBkdW1wX2NzX3RhYmxlW3ZbMV1dLnN0cnVjdCB0aGVuDQogICAgICAgICAgICAgICAgY2xhc3NfbmFtZXNbI2NsYXNzX25hbWVzICsgMV0gPSBzdHJpbmcuZ3N1YihkdW1wX2NzX3RhYmxlW3ZbMV1dLnN0cnVjdCwgIi4rIHN0cnVjdCAoLispIC4rIiwgIiUxIik6Z3N1YigiIC8vIFR5cGVEZWZJbmRleC4rIiwgIiIpOmdzdWIoIiguKykgOiAuKyIsICIlMSIpOmdzdWIoIiguKyksIC4rIiwgIiUxIik6Z3N1YigiIDoiLCAiIikNCiAgICAgICAgICAgIGVuZA0KICAgICAgICBlbmQNCiAgICAgICAgbG9jYWwgcmVzdWx0c19tZW51ID0gZ2cuY2hvaWNlKHJlc3VsdHMsIG5pbCwgc2NyaXB0X3RpdGxlIC4uICJcblxu4oS577iPIEZpZWxkIHNlYXJjaCByZXN1bHRzLiDihLnvuI8iKQ0KICAgICAgICBpZiByZXN1bHRzX21lbnUgfj0gbmlsIHRoZW4NCiAgICAgICAgICAgIGdnLnRvYXN0KHNjcmlwdF90aXRsZSAuLiAiXG5cbuKEue+4jyBMb2FkaW5nIFBsdWdpbiDihLnvuI8iKQ0KICAgICAgICAgICAgcGx1Z2luTWFuYWdlci5kZWZhdWx0SGFuZGxlcigiY2xhc3NfcmVzdWx0cyIsIGNsYXNzX25hbWVzW3Jlc3VsdHNfbWVudV0pDQogICAgICAgIGVuZA0KICAgIGVuZA0KfQ0KDQpmaWVsZFNlYXJjaFJlc3VsdHMuaG9tZSgpDQo"
        },
        [7] = {
            file_name = "plugin_bc_dump_search.lua",
            file_data = ""
        },
        [8] = {
            file_name = "plugin_bc_il2cpp_fields.lua",
            file_data = ""
        },
        [11] = {
            file_name = "plugin_bc_metadata_dumper.lua",
            file_data = ""
        },
        [12] = {
            file_name = "plugin_bc_il2cpp_edits.lua",
            file_data = ""
        },
		[13] = {
            file_name = "plugin_bc_script_creator.lua",
            file_data = ""
        },
        [14] = {
            file_name = "plugin_bc_static_value_finder.lua",
            file_data = ""
        }
    },
    installToolbox = function()
        directory_created = true
        for i, v in pairs(gg.getRangesList()) do
            if v["end"] - v.start < 10240 then
                if not string.find(v["name"], "deleted") then
                    create_start = v.start
                    create_end = v["end"]
                    break
                end
            end
        end
        gg.dumpMemory(create_start, create_end, dataPath, gg.DUMP_SKIP_SYSTEM_LIBS)
        gg.dumpMemory(create_start, create_end, pluginsDataPath, gg.DUMP_SKIP_SYSTEM_LIBS)
        gg.dumpMemory(create_start, create_end, configDataPath, gg.DUMP_SKIP_SYSTEM_LIBS)
        for i, v in pairs(toolboxInstaller.filesTable) do
            toolboxInstaller.writeFile(v.file_name, toolboxInstaller.decodeBase64(v.file_data))
        end
        file = io.open(configDataPath .. version, "w+")
        file:write(current_version)
        file:close()
    end,
    writeFile = function(file_name, file_data)
        file = io.open(pluginsDataPath .. file_name, "w+")
        file:write(file_data)
        file:close()
    end,
    checkInstall = function()
        local file = assert(io.open(configDataPath .. "version", "r"))
        local content = file:read("*a")
        file:close()
        return content
    end,
    decodeBase64 = function(s)
        local bs = {
            [0] =   'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',
            'Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f',
            'g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v',
            'w','x','y','z','0','1','2','3','4','5','6','7','8','9','+','/',
        }
        local invBs1 = {}
        local invBs2 = {}
        local invBs3 = {}
        local invBs4 = {}
        for i = 0, 63 do
            invBs1[bs[i]] = i << 18
            invBs2[bs[i]] = i << 12
            invBs3[bs[i]] = i << 6
            invBs4[bs[i]] = i
        end
        local char = string.char
        local sub = string.sub
        local len = #s
        if len % 4 ~= 0 then
            s = s .. string.rep('=', 4 - (len % 4))
        end
        local pad = s:sub(-2)
        if pad == '==' then
            pad = 'AA'
        elseif pad:sub(-1) == '=' then
            pad = 'A'
        else
            pad = ''
        end
        if #pad > 0 then
            s = s:sub(1, #s - #pad) .. pad
        end
        s = s:gsub('....', function(block)
            local n = invBs1[block:sub(1, 1)] + invBs2[block:sub(2, 2)] + invBs3[block:sub(3, 3)] +
                          invBs4[block:sub(4, 4)]
            return char((n >> 16) & 255, (n >> 8) & 255, n & 255)
        end)
        if #pad == 0 then
            return s
        end
        return s:sub(1, #s - #pad)
    end,
    updateToolbox = function()
        local should_compare
        local download_all
        
        if toolboxInstaller.githubSHAs then
            should_compare = true
        else
            download_all = true
        end
        local githubTree = gg.makeRequest("https://api.github.com/repos/BadCaseDotOrg/badcases-toolbox/git/trees/74981be136e5000c128ac75db908a9503618507b").content
        githubTree = json.decode(githubTree)
        for i,v in ipairs (githubTree["tree"]) do
            local download 
            if should_compare == true then
                if toolboxInstaller.githubSHAs["tree"][i].sha ~= v.sha then
                    download = true
                end
            end
            if download_all == true then
                download = true
            end 
            if download == true then
                if v.path:find("%.lua$") then
                    gg.toast(script_title.."\n\nUpdating "..v.path)
                    local githubBlob = gg.makeRequest(v.url).content
                    githubBlob = json.decode(githubBlob)
                    local updatedPluginData = toolboxInstaller.decodeBase64(githubBlob["content"]:gsub("%\n",""))
                    toolboxInstaller.writeFile(v.path, updatedPluginData)
                end
            end
        end
        toolboxInstaller.githubSHAs = githubTree
        file = io.open(configDataPath .. "githubTree.json", "w+")
        file:write(json.encode(toolboxInstaller.githubSHAs))
        file:close()
    end,
    checkUpdates = function()
        local file = assert(io.open(configDataPath .. "githubTree.json", "r"))
        local content = file:read("*a")
        file:close()
        toolboxInstaller.githubSHAs = json.decode(content)
    end,
}
current_version = "1.1.8"
if pcall(toolboxInstaller.checkInstall) == false then
    toolboxInstaller.installToolbox()
elseif toolboxInstaller.checkInstall() ~= current_version then
    toolboxInstaller.installToolbox()
end
pcall(toolboxInstaller.checkUpdates)

local updateMenu = gg.choice({"✅ Yes", "❌ No"},nil,script_title.."\n\nDo you want to check GitHub for updates?")
if updateMenu ~= nil then
    if updateMenu == 1 then
        toolboxInstaller.updateToolbox()
    end
end

dofile(pluginsDataPath .. "toolbox_core.lua")
